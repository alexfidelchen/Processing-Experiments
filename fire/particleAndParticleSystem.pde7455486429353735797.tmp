// Particle and the particle system is here. 

class Particle {
  //Properties 
  PVector location;
  PVector velocity;
  PVector acceleration = new PVector(0,0);
  float lifespan = 255;
  float mass  = 1; 
  
  //Constructor 
  Particle(PVector l) {
    location = l.copy();
    float velX = (float) generator.nextGaussian()*0.3;
    float velY = (float) generator.nextGaussian()*0.3 - 1;
    //Subtract by 1 to ensure the emojis move up. 
    velocity = new PVector (velX, velY);
    
  }
  
  //Methods 
  
  void move() {
    velocity.add(acceleration);
    location.add(velocity);
    lifespan = lifespan - 2;
    acceleration.mult(0); //Reset the acceleration. 
  }
  
  void display(){
  imageMode(CENTER);
  tint(255,lifespan);
  image(emoji,location.x,location.y);
  } 
  
  void applyForce(PVector f){
    PVector force = f.copy();
    force.div(mass);
    acceleration.add(force);
  }
  
  //The particle can check if its dead or not. 
  boolean dead(){
    if (lifespan < 0) {
      return true;
    } else {
      return false;
    }
  }
  
 //We can run some of the most important methods with the run() methods below. 
   void run(){
     move();
     display();
   }
}

//Particle System
class ParticleSystem {
  ArrayList<Particle> particles = new ArrayList<Particle>();
  PVector origin;
 
  ParticleSystem(PVector location) {
    origin = location.copy();
  }
 
  void addParticle() {
    particles.add(new Particle(origin));
  }
  
  void applyForce(PVector force){
    for (Particle p: particles){
      p.applyForce(force);
    }
  }
 
  void run() {
    addParticle();
    Iterator<Particle> it = particles.iterator();
    while (it.hasNext()) {
      Particle p = it.next();
      p.run();
      if (p.dead()) {
        it.remove();
      }
    }
    //println("Number of Particles in the Particle System: " + particles.size());
  }
}